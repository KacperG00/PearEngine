#ifndef PEAR_ENGINE_SHADERS__DEFAULT_STATIC_SPRITE_SHADER_
#define PEAR_ENGINE_SHADERS__DEFAULT_STATIC_SPRITE_SHADER_

#include <string>

namespace pear { namespace graphics { namespace shaders {
	
	const std::string DefaultStaticSpriteShader16_SRC =
		"#vertex_shader\n"
		"#version 130\n"
		"\n"
		"in vec3 vsPosition;\n"
		"in vec4 vsColor;\n"
		"in float vsTextureID;\n"
		"in vec2 vsTextureCoords;\n"
		"\n"
		"out vec4 fsColor;\n"
		"out float fsTextureID;\n"
		"out vec2 fsTextureCoords;\n"
		"\n"
		"void main()\n"
		"{\n"
		"	gl_Position = vec4( vsPosition, 1.0f );\n"
		"	\n"
		"	fsColor = vsColor;\n"
		"	fsTextureID = vsTextureID;\n"
		"	fsTextureCoords = vsTextureCoords;\n"
		"}\n"
		"\n"
		"#fragment_shader\n"
		"#version 130\n"
		"\n"
		"in vec4 fsColor;\n"
		"in float fsTextureID;\n"
		"in vec2 fsTextureCoords;\n"
		"\n"
		"out vec4 outColor;\n"
		"\n"
		"uniform sampler2D textures[16];\n"
		"uniform uint arr_TextureID[16];\n"
		"\n"
		"void main()\n"
		"{\n"
		"	vec4 color;\n"
		"	\n"
		"	if( fsTextureID > 0.0f )\n"
		"	{\n"
		"		uint tid = uint(fsTextureID);\n"
		"		int textureSlot = 0;\n"
		"		int i = 0;\n"
		"		\n"
		"		while( textureSlot == 0 && i < 16 )\n"
		"		{\n"
		"			if( tid == arr_TextureID[i] )\n"
		"				textureSlot = i + 1;\n"
		"			i += 1;\n"
		"		}\n"
		"		\n"
		"		switch( textureSlot )\n"
		"		{\n"
		"			case 1:	color = 	texture( textures[0], 	vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y) ) * fsColor; break;\n"
		"			case 2: color = 	texture( textures[1], 	vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y) ) * fsColor; break;\n"
		"			case 3: color = 	texture( textures[2], 	vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y) ) * fsColor; break;\n"
		"			case 4: color = 	texture( textures[3], 	vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y) ) * fsColor; break;\n"
		"			case 5: color = 	texture( textures[4], 	vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y) ) * fsColor; break;\n"
		"			case 6: color = 	texture( textures[5], 	vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y) ) * fsColor; break;\n"
		"			case 7: color = 	texture( textures[6], 	vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y) ) * fsColor; break;\n"
		"			case 8: color = 	texture( textures[7], 	vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y) ) * fsColor; break;\n"
		"			case 9: color = 	texture( textures[8], 	vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y) ) * fsColor; break;\n"
		"			case 10: color = 	texture( textures[9], 	vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y) ) * fsColor; break;\n"
		"			case 11: color = 	texture( textures[10], 	vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y) ) * fsColor; break;\n"
		"			case 12: color = 	texture( textures[11], 	vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y) ) * fsColor; break;\n"
		"			case 13: color = 	texture( textures[12], 	vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y) ) * fsColor; break;\n"
		"			case 14: color = 	texture( textures[13], 	vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y) ) * fsColor; break;\n"
		"			case 15: color = 	texture( textures[14], 	vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y) ) * fsColor; break;\n"
		"			case 16: color = 	texture( textures[15], 	vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y) ) * fsColor; break;\n"
		"		}\n"
		"	}\n"
		"	else\n"
		"	{\n"
		"		color = fsColor;\n"
		"	}\n"
		"	\n"
		"	outColor = color;\n"
		"}\n";
	
	const std::string DefaultStaticSpriteShader32_SRC =
		"#vertex_shader\n"
		"#version 130\n"
		"\n"
		"in vec3 vsPosition;\n"
		"in vec4 vsColor;\n"
		"in float vsTextureID;\n"
		"in vec2 vsTextureCoords;\n"
		"\n"
		"out vec4 fsColor;\n"
		"out float fsTextureID;\n"
		"out vec2 fsTextureCoords;\n"
		"\n"
		"void main()\n"
		"{\n"
		"	gl_Position = vec4( vsPosition, 1.0f );\n"
		"	\n"
		"	fsColor = vsColor;\n"
		"	fsTextureID = vsTextureID;\n"
		"	fsTextureCoords = vsTextureCoords;\n"
		"}\n"
		"\n"
		"#fragment_shader\n"
		"#version 130\n"
		"\n"
		"in vec4 fsColor;\n"
		"in float fsTextureID;\n"
		"in vec2 fsTextureCoords;\n"
		"\n"
		"out vec4 outColor;\n"
		"\n"
		"uniform sampler2D textures[32];\n"
		"uniform uint arr_TextureID[32];\n"
		"\n"
		"void main()\n"
		"{\n"
		"	vec4 color;\n"
		"	\n"
		"	if( fsTextureID > 0.0f )\n"
		"	{\n"
		"		uint tid = uint(fsTextureID);\n"
		"		int textureSlot = 0;\n"
		"		int i = 0;\n"
		"		\n"
		"		while( textureSlot == 0 && i < 32 )\n"
		"		{\n"
		"			if( tid == arr_TextureID[i] )\n"
		"				textureSlot = i + 1;\n"
		"			i += 1;\n"
		"		}\n"
		"		\n"
		"		switch( textureSlot )\n"
		"		{\n"
		"			case 1:  color = texture(textures[0],  vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 2:  color = texture(textures[1],  vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 3:  color = texture(textures[2],  vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 4:  color = texture(textures[3],  vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 5:  color = texture(textures[4],  vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 6:  color = texture(textures[5],  vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 7:  color = texture(textures[6],  vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 8:  color = texture(textures[7],  vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 9:  color = texture(textures[8],  vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 10: color = texture(textures[9],  vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 11: color = texture(textures[10], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 12: color = texture(textures[11], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 13: color = texture(textures[12], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 14: color = texture(textures[13], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 15: color = texture(textures[14], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 16: color = texture(textures[15], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 17: color = texture(textures[16], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 18: color = texture(textures[17], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 19: color = texture(textures[18], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 20: color = texture(textures[19], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 21: color = texture(textures[20], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 22: color = texture(textures[21], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 23: color = texture(textures[22], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 24: color = texture(textures[23], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 25: color = texture(textures[24], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 26: color = texture(textures[25], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 27: color = texture(textures[26], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 28: color = texture(textures[27], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 29: color = texture(textures[28], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 30: color = texture(textures[29], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 31: color = texture(textures[30], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"			case 32: color = texture(textures[31], vec2(fsTextureCoords.x, 1.0f - fsTextureCoords.y)) * fsColor; break;\n"
		"		}\n"
		"	}\n"
		"	else\n"
		"	{\n"
		"		color = fsColor;\n"
		"	}\n"
		"	\n"
		"	outColor = color;\n"
		"}\n";
	
	
} } }

#endif // PEAR_ENGINE_SHADERS__DEFAULT_STATIC_SPRITE_SHADER_
